{"version":3,"file":"static/js/821.4c65de65.chunk.js","mappings":"8OAKA,MAkIA,EAlIqBA,KACnB,MAAOC,GAAQC,EAAAA,EAAAA,UACTC,GAAWC,EAAAA,EAAAA,OACX,UAAEC,EAAS,MAAEC,IAAUC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,OAgCxD,OACEC,EAAAA,EAAAA,MAACR,EAAAA,EAAI,CArBLS,SAAU,CACRC,KAAM,IAERC,WAAY,CACVD,KAAM,IAmBNX,KAAMA,EACNa,KAAK,WACLC,SAnCaC,IACf,MAAM,KAAEF,EAAI,MAAEG,EAAK,SAAEC,EAAQ,QAAEC,GAAYH,EAEvCE,IAAaC,IACfhB,GAASiB,EAAAA,EAAAA,IAAS,CAAEN,OAAMG,QAAOC,eAChCb,IAAcC,GAASL,EAAKoB,cAC/B,EA8BEC,KAAM,UACNC,cAAe,CACbC,UAAW,CAAC,WAAY,WAAY,QACpCC,OAAQ,MAEVC,MAAO,CACLC,MAAO,KAETC,oBAAkB,EAAAC,SAAA,EAElBC,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,QACLiB,MAAM,SACNC,MAAO,CACL,CACEC,KAAM,QACNC,QAAS,kCAEX,CACEC,UAAU,EACVD,QAAS,8BAEXL,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAK,OAGRN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,WACLiB,MAAM,WACNC,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,gCAGbG,aAAW,EAAAR,UAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,SAAc,OAGjBN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,UACLiB,MAAM,mBACNO,aAAc,CAAC,YACfD,aAAW,EACXL,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,iCAEXK,IAAA,IAAC,cAAEC,GAAeD,EAAA,MAAM,CACtBE,UAASA,CAACC,EAAGC,IACNA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OACb,IAAIC,MAAM,oDAHHF,QAAQG,UAMpB,GACDlB,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAAA,SAAc,OAGjBN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CACRY,KAAK,OACLiB,MAAM,OACNiB,QAAQ,uCACRhB,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,0BACTe,YAAY,IAEdpB,UAEFC,EAAAA,EAAAA,KAACM,EAAAA,EAAK,OAERN,EAAAA,EAAAA,KAAC5B,EAAAA,EAAAA,KAAS,CAjGZW,WAAY,CACVqC,GAAI,CACFtC,KAAM,GACNuC,OAAQ,GAEVC,GAAI,CACFxC,KAAM,GACNuC,OAAQ,IA0FuBtB,UAC/BC,EAAAA,EAAAA,KAACuB,EAAAA,GAAM,CAACpB,KAAK,UAAUqB,SAAS,SAAQzB,SAAC,iBAItC,EC/HI,SAAS0B,IACtB,OACEzB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAc,CAAA3B,UACbnB,EAAAA,EAAAA,MAAA,OAAAmB,SAAA,EACEC,EAAAA,EAAAA,KAAC2B,EAAAA,GAAM,CAAA5B,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBAETC,EAAAA,EAAAA,KAAC9B,EAAY,QAIrB,C","sources":["components/registerForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\n\nimport { register } from '../../redux/auth/auth-operations';\nimport { Button, Form, Input } from 'antd';\n\nconst RegisterForm = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector(state => state.auth);\n\n  const onFinish = values => {\n    const { name, email, password, confirm } = values;\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password }));\n      !isLoading && !error && form.resetFields();\n    }\n  };\n\n  const formItemLayout = {\n    labelCol: {\n      span: 24,\n    },\n    wrapperCol: {\n      span: 24,\n    },\n  };\n\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 16,\n        offset: 4,\n      },\n    },\n  };\n  return (\n    <Form\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      size={'default'}\n      initialValues={{\n        residence: ['zhejiang', 'hangzhou', 'xihu'],\n        prefix: '86',\n      }}\n      style={{\n        width: 300,\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(\n                new Error('The new password that you entered do not match!')\n              );\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"name\"\n        label=\"Name\"\n        tooltip=\"What do you want others to call you?\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your name!',\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport RegisterForm from '../components/registerForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <HelmetProvider>\n      <div>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n      </div>\n    </HelmetProvider>\n  );\n}\n"],"names":["RegisterForm","form","Form","dispatch","useDispatch","isLoading","error","useSelector","state","auth","_jsxs","labelCol","span","wrapperCol","name","onFinish","values","email","password","confirm","register","resetFields","size","initialValues","residence","prefix","style","width","scrollToFirstError","children","_jsx","label","rules","type","message","required","Input","hasFeedback","dependencies","_ref","getFieldValue","validator","_","value","Promise","reject","Error","resolve","tooltip","whitespace","xs","offset","sm","Button","htmlType","Register","HelmetProvider","Helmet"],"sourceRoot":""}